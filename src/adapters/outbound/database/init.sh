#!/bin/bash
set -e

echo "ðŸš€ Starting database initialization..."

psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    -- Check and create migration user
    DO \$\$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_user WHERE usename = '${DB_MIGRATION_USER}') THEN
            CREATE USER ${DB_MIGRATION_USER} WITH PASSWORD '${DB_MIGRATION_PASSWORD}';
            RAISE NOTICE 'User ${DB_MIGRATION_USER} created';
        ELSE
            ALTER USER ${DB_MIGRATION_USER} WITH PASSWORD '${DB_MIGRATION_PASSWORD}';
            RAISE NOTICE 'User ${DB_MIGRATION_USER} password updated';
        END IF;
    END
    \$\$;

    -- Grant permissions for migration user
    GRANT CONNECT ON DATABASE "${POSTGRES_DB}" TO ${DB_MIGRATION_USER};
    GRANT USAGE, CREATE ON SCHEMA public TO ${DB_MIGRATION_USER};

    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${DB_MIGRATION_USER};
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${DB_MIGRATION_USER};
    GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO ${DB_MIGRATION_USER};
    GRANT ALL PRIVILEGES ON ALL PROCEDURES IN SCHEMA public TO ${DB_MIGRATION_USER};

    ALTER DEFAULT PRIVILEGES FOR ROLE ${DB_MIGRATION_USER} IN SCHEMA public
        GRANT ALL PRIVILEGES ON TABLES TO ${DB_MIGRATION_USER};
    ALTER DEFAULT PRIVILEGES FOR ROLE ${DB_MIGRATION_USER} IN SCHEMA public
        GRANT ALL PRIVILEGES ON SEQUENCES TO ${DB_MIGRATION_USER};
    ALTER DEFAULT PRIVILEGES FOR ROLE ${DB_MIGRATION_USER} IN SCHEMA public
        GRANT ALL PRIVILEGES ON FUNCTIONS TO ${DB_MIGRATION_USER};
    ALTER DEFAULT PRIVILEGES FOR ROLE ${DB_MIGRATION_USER} IN SCHEMA public
        GRANT ALL PRIVILEGES ON TYPES TO ${DB_MIGRATION_USER};

    -- Check and create application user
    DO \$\$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_user WHERE usename = '${DB_APP_USER}') THEN
            CREATE USER ${DB_APP_USER} WITH PASSWORD '${DB_APP_PASSWORD}';
            RAISE NOTICE 'User ${DB_APP_USER} created';
        ELSE
            ALTER USER ${DB_APP_USER} WITH PASSWORD '${DB_APP_PASSWORD}';
            RAISE NOTICE 'User ${DB_APP_USER} password updated';
        END IF;
    END
    \$\$;

    -- Grant permissions for application user
    GRANT CONNECT ON DATABASE "${POSTGRES_DB}" TO ${DB_APP_USER};
    GRANT USAGE ON SCHEMA public TO ${DB_APP_USER};

    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${DB_APP_USER};
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ${DB_APP_USER};
    GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO ${DB_APP_USER};
    GRANT EXECUTE ON ALL PROCEDURES IN SCHEMA public TO ${DB_APP_USER};

    ALTER DEFAULT PRIVILEGES FOR ROLE ${DB_MIGRATION_USER} IN SCHEMA public
        GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO ${DB_APP_USER};
    ALTER DEFAULT PRIVILEGES FOR ROLE ${DB_MIGRATION_USER} IN SCHEMA public
        GRANT USAGE, SELECT ON SEQUENCES TO ${DB_APP_USER};
    ALTER DEFAULT PRIVILEGES FOR ROLE ${DB_MIGRATION_USER} IN SCHEMA public
        GRANT EXECUTE ON FUNCTIONS TO ${DB_APP_USER};

    ALTER DEFAULT PRIVILEGES FOR ROLE ${POSTGRES_USER} IN SCHEMA public
        GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO ${DB_APP_USER};
    ALTER DEFAULT PRIVILEGES FOR ROLE ${POSTGRES_USER} IN SCHEMA public
        GRANT USAGE, SELECT ON SEQUENCES TO ${DB_APP_USER};
EOSQL

echo "âœ… Database initialization completed!"
echo "ðŸ“Š Processing users: ${DB_MIGRATION_USER} (migrations), ${DB_APP_USER} (application)"
